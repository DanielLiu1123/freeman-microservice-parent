#spring.shardingsphere.mode.type=CLUSTER
# sharding-jdbc数据源配置
spring.shardingsphere.datasource.names=ds-user,ds-order

spring.shardingsphere.datasource.ds-user.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds-user.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds-user.jdbc-url=jdbc:mysql://127.0.0.1:3306/freeman_user?serverTimezone=Asia/Shanghai&characterEncoding=utf8
spring.shardingsphere.datasource.ds-user.username=root
spring.shardingsphere.datasource.ds-user.password=llw1123..

spring.shardingsphere.datasource.ds-order.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds-order.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds-order.jdbc-url=jdbc:mysql://127.0.0.1:3306/freeman_order?serverTimezone=Asia/Shanghai&characterEncoding=utf8
spring.shardingsphere.datasource.ds-order.username=root
spring.shardingsphere.datasource.ds-order.password=llw1123..

# sharding-jdbc分片配置
# 分片策略, id为奇数, 在奇数库奇数表

#spring.shardingsphere.rules.sharding.tables.order.actual-data-nodes=ds$->{1..2}.order_$->{1..2}
spring.shardingsphere.rules.sharding.tables.order.actual-data-nodes=ds-order.order
spring.shardingsphere.rules.sharding.tables.order.logic-table=order
spring.shardingsphere.rules.sharding.tables.order.key-generate-strategy.column=id
spring.shardingsphere.rules.sharding.tables.order.key-generate-strategy.key-generator-name=snowflake
spring.shardingsphere.rules.sharding.tables.order.database-strategy.standard.sharding-column=id
spring.shardingsphere.rules.sharding.tables.order.database-strategy.standard.sharding-algorithm-name=algorithm-order-db
spring.shardingsphere.rules.sharding.tables.order.table-strategy.standard.sharding-column=id
spring.shardingsphere.rules.sharding.tables.order.table-strategy.standard.sharding-algorithm-name=algorithm-order-tb


spring.shardingsphere.rules.sharding.tables.user.actual-data-nodes=ds-user.user_$->{0..1}
spring.shardingsphere.rules.sharding.tables.user.logic-table=user
spring.shardingsphere.rules.sharding.tables.user.key-generate-strategy.column=id
spring.shardingsphere.rules.sharding.tables.user.key-generate-strategy.key-generator-name=snowflake
spring.shardingsphere.rules.sharding.tables.user.database-strategy.standard.sharding-column=id
spring.shardingsphere.rules.sharding.tables.user.database-strategy.standard.sharding-algorithm-name=algorithm-user-db
spring.shardingsphere.rules.sharding.tables.user.table-strategy.standard.sharding-column=id
spring.shardingsphere.rules.sharding.tables.user.table-strategy.standard.sharding-algorithm-name=algorithm-user-tb


# 分库分表算法
spring.shardingsphere.rules.sharding.sharding-algorithms.algorithm-user-db.props.algorithm-expression=ds-user
spring.shardingsphere.rules.sharding.sharding-algorithms.algorithm-user-db.type=INLINE
spring.shardingsphere.rules.sharding.sharding-algorithms.algorithm-user-tb.props.algorithm-expression=user_$->{(Long.parseLong(id)) % 2}
spring.shardingsphere.rules.sharding.sharding-algorithms.algorithm-user-tb.type=INLINE

spring.shardingsphere.rules.sharding.sharding-algorithms.algorithm-order-db.props.algorithm-expression=ds-order
spring.shardingsphere.rules.sharding.sharding-algorithms.algorithm-order-db.type=INLINE
spring.shardingsphere.rules.sharding.sharding-algorithms.algorithm-order-tb.props.algorithm-expression=order
spring.shardingsphere.rules.sharding.sharding-algorithms.algorithm-order-tb.type=INLINE

# key 生成规则
spring.shardingsphere.rules.sharding.key-generators.snowflake.type=SNOWFLAKE
spring.shardingsphere.rules.sharding.key-generators.snowflake.props.worker-id=123


# sharding-jdbc显示最终SQL
spring.shardingsphere.props.sql-show=true
spring.main.allow-bean-definition-overriding=true